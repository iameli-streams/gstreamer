fragment_downloaded_cb({"url":"analytics/gstanalyticsmeta.html#gst_analytics_relation_meta_exist","fragment":"\n\tgst_analytics_relation_meta_exist\n\n\n\tGstAnalytics.RelationMeta.prototype.exist\n\n\n\tGstAnalytics.RelationMeta.exist\n\nVerify existence of relation(s) between an_meta_first_d and\nan_meta_second_id according to relation condition cond_types. It optionally\nalso return a shortest path of relations ( compliant with cond_types)\nbetween an_meta_first_id and an_meta_second_id.\nParameters:\na GstAnalyticsRelationMeta describing analysis-meta\nrelation\nFirst analysis-meta\nSecond analysis-meta\nMaximum number of relation between an_meta_first_id and\nan_meta_second_id.\nA value of 1 mean only only consider direct relation.\ncondition on relation types.\n(transfer full)(nullable)(out caller-allocates)(array)\n(element-type gint):\nIf not NULL this list will be filled with relation path between\nan_meta_first_id and\nan_meta_second_id. List value should be access with GSList API. Use\nGPOINTER_TO_INT(iter->data) where iter is a GSList element to get\nanalysis-meta id on the relation path. Free this list with g_slist_free\n(@relations_path) after using.\nTRUE if a relation between exit between an_meta_first_id and\nan_meta_second_id, otherwise FALSE.\n\n\tSince\t\t\t: 1.24\n\t\t\nVerify existence of relation(s) between an_meta_first_d and\nan_meta_second_id according to relation condition cond_types. It optionally\nalso return a shortest path of relations ( compliant with cond_types)\nbetween an_meta_first_id and an_meta_second_id.\nParameters:\na GstAnalytics.RelationMeta describing analysis-meta\nrelation\nFirst analysis-meta\nSecond analysis-meta\nMaximum number of relation between an_meta_first_id and\nan_meta_second_id.\nA value of 1 mean only only consider direct relation.\ncondition on relation types.\nReturns a tuple made of:\nTRUE if a relation between exit between an_meta_first_id and\nan_meta_second_id, otherwise FALSE.\nTRUE if a relation between exit between an_meta_first_id and\nan_meta_second_id, otherwise FALSE.\n\n\tSince\t\t\t: 1.24\n\t\t\nVerify existence of relation(s) between an_meta_first_d and\nan_meta_second_id according to relation condition cond_types. It optionally\nalso return a shortest path of relations ( compliant with cond_types)\nbetween an_meta_first_id and an_meta_second_id.\nParameters:\na GstAnalytics.RelationMeta describing analysis-meta\nrelation\nFirst analysis-meta\nSecond analysis-meta\nMaximum number of relation between an_meta_first_id and\nan_meta_second_id.\nA value of 1 mean only only consider direct relation.\ncondition on relation types.\nReturns a tuple made of:\nTRUE if a relation between exit between an_meta_first_id and\nan_meta_second_id, otherwise FALSE.\nTRUE if a relation between exit between an_meta_first_id and\nan_meta_second_id, otherwise FALSE.\n\n\tSince\t\t\t: 1.24\n\t\t\n"});