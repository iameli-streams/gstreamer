fragment_downloaded_cb({"url":"qmlgl/qmlglsink.html#qmlglsink-page","fragment":"qmlglsink\nqmlglsink provides a way to render a video stream as a Qml object inside\nthe Qml scene graph.  This is achieved by providing the incoming OpenGL\ntextures to Qt as a scene graph object.\nqmlglsink will attempt to retrieve the windowing system display connection\nthat Qt is using (#GstGLDisplay).  This may be different to any already\nexisting window system display connection already in use in the pipeline for\na number of reasons.  A couple of examples of this are:\nIf one of these scenarios occurs, then there will be multiple OpenGL contexts\nin use in the pipeline.  This means that either the pipeline will fail to\nstart up correctly, a downstream element may reject buffers, or a complete\nGPU->System memory->GPU transfer is performed for every buffer.\nThe requirement to avoid this is that all elements share the same\nGstGLDisplay object and as Qt cannot currently share an existing window\nsystem display connection, GStreamer must use the window system display\nconnection provided by Qt.  This window system display connection can be\nretrieved by either a qmlglsink element or a qmlgloverlay element. The\nrecommended usage is to have either element (qmlglsink or qmlgloverlay)\nbe the first to propagate the GstGLDisplay for the entire pipeline to use by\nsetting either element to the READY element state before any other OpenGL\nelement in the pipeline.\nIn a dynamically adding qmlglsink (or qmlgloverlay) to a pipeline case,\nthere are some considerations for ensuring that the window system display\nand OpenGL contexts are compatible with Qt.  When the qmlgloverlay (or\nqmlglsink) element is added and brought up to READY, it will propagate it's\nown GstGLDisplay using the GstContext mechanism regardless of any existing\nGstGLDisplay used by the pipeline previously.  In order for the new\nGstGLDisplay to be used, the application must then set the provided\nGstGLDisplay containing GstContext on the pipeline.  This may effectively\ncause each OpenGL element to replace the window system display and also the\nOpenGL context it is using.  As such this process may take a significant\namount of time and resources as objects are recreated in the new OpenGL\ncontext.\nAll instances of qmlglsink and qmlgloverlay will return the exact same\nGstGLDisplay object while the pipeline is running regardless of whether\nany qmlglsink or qmlgloverlay elements are added or removed from the\npipeline.\n"});